/*
 * Copyright Â©2025 Ewsgit<https://ewsgit.uk> and YourDash<https://yourdash.ewsgit.uk> contributors.
 * YourDash is licensed under the MIT License. (https://mit.ewsgit.uk)
 */

import react from "@vitejs/plugin-react";
import { defineConfig } from "vite";
import dynamicImport from "vite-plugin-dynamic-import";
import path from "node:path";
import * as fs from "node:fs";
// enable for https testing. import mkcert from "vite-plugin-mkcert"

function applicationRouter() {
  const virtualModuleId = 'virtual:application-router/index.tsx'
  const resolvedVirtualModuleId = '\0' + virtualModuleId

  return {
    name: 'yourdash-application-router-generator', // required, will show up in warnings and errors
    resolveId(id) {
      if (id === virtualModuleId) {
        return resolvedVirtualModuleId
      }
    },
    load(id: string) {
      if (id === resolvedVirtualModuleId) {
        let fileTemplate = `/**
 * This file is auto-generated by backend/src/main.ts during vite server startup don't edit this file for any reason
*/

import React from "react";
import { Route, Routes } from "react-router";
import loadable from "@loadable/component";

/* region loadable */const AppRouter=[{/* region routes */}];export default AppRouter
`;

        let loadableRegionReplacement = "";
        let routeRegionReplacement = "";
        let appsDirectoryPath = process.env.VITE_IS_DOCKER === "true" ? "/web/src/app/apps/" : "../../apps/"
        const allApps = fs.readdirSync(appsDirectoryPath)

        for (let i = 0; i < allApps.length - 1; i++) {
          loadableRegionReplacement += `const Application${i}=loadable(()=>import("${path.join(
            path.resolve(path.join(appsDirectoryPath, `${allApps[i]}`)),
            "./web/src/index.tsx"
          ).replaceAll(path.sep, path.posix.sep)}"));`;
          routeRegionReplacement += `<Route path={"${allApps[i]}/*"} element={<Application${i}/>}/>,`;
        }

        fileTemplate = fileTemplate.replace("/* region loadable */", loadableRegionReplacement);
        fileTemplate = fileTemplate.replace("{/* region routes */}", routeRegionReplacement);

        return fileTemplate
      }
    }
  }
}

// ViteJS docs: https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    // @ts-ignore
    react({
      babel: {
        plugins: [["babel-plugin-react-compiler", {}]],
      },
    }),
    // @ts-ignore
    dynamicImport(),
    // enable for https tests. mkcert()
    applicationRouter()
  ],
  appType: "spa",
  root: "./",
  base: "./",
  build: {
    rollupOptions: {
      external: ["chart.js"],
    },
    sourcemap: true,
    minify: false,
  },
  css: {
    preprocessorOptions: {
      scss: {
        api: "modern-compiler", // or "modern"
      },
    },
  },
});
